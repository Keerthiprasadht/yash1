/*These are header files that define functions for input and output operations,
  memory allocation and manipulation, and string manipulation, and time and date*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

//These are constants that define the maximum size of the filetype and the maximum size of the JSON string.
#define MAX_FILE_TYPE_SIZE 64
#define MAX_JSON_SIZE 2048

/*This is a struct that defines the format of the auditLog object,  with member variables representing the
  filetype, file format version, date, status, factory log, and audit token.*/
struct auditLog {
    char filetype[MAX_FILE_TYPE_SIZE];
    int fileFormatVersion;
    char *date;
    char *status;
    char *factoryLog;
    char *auditToken;
};

//These are functions that return the values for each member variable of the auditLog struct.
char *getFileType() {
    return "AuditData";
}

int getFileFormatVersion() {
    return 1;
}

/*This function uses the time() function to get the current system time, and the localtime() function to
  convert the system time to a struct tm object representing the local time.*/
char *getDate() {
	time_t t = time(NULL);
	struct tm tm = *localtime(&t);
    char *date = (char*) malloc(20 * sizeof(char));

/*  snprintf() to format the date string in the required format. "2022-12-21T10:11:34"*/
    snprintf(date, 20, "%04d-%02d-%02dT%02d:%02d:%02d", tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday, tm.tm_hour, tm.tm_min, tm.tm_sec);
    return date;
}

char *getStatus() {
    return "programming";
}

char *getFactoryLog() {
    return "free text";
}

char *getAuditToken() {
    return "audit token generated by keySTREAM Security Client, in <base64>";
}

/*This function takes a structure and prepares a JSON in string format*/
/*This is a function that takes a pointer to an auditLog struct and creates a JSON string with
  the member variable values, using the malloc() function to allocate memory for the string.*/
char* create_json(struct auditLog *adtLog) {
    char *json = (char*) malloc(MAX_JSON_SIZE * sizeof(char));
    snprintf(json, MAX_JSON_SIZE,
             "{ \"filetype\": \"%s\", \"fileFormatVersion\": %d, \"date\": \"%s\", \"status\": \"%s\", \"factoryLog\": \"%s\", \"auditToken\": \"%s\" }",
             adtLog->filetype, adtLog->fileFormatVersion, adtLog->date, adtLog->status, adtLog->factoryLog, adtLog->auditToken);
    return json;
}

void print_json(char *jsoString)
{
	//use printf
	printf("%s\n",jsoString);
}


int main(int argc, char **argv) {
    struct auditLog adtLog;

    // Initialize the struct members
    char *fileType = getFileType();
    int version = getFileFormatVersion();
    char *date = getDate();
    char *status = getStatus();
    char *factoryLog = getFactoryLog();
    char *auditToken = getAuditToken();

    // Copy the values into the struct
    snprintf(adtLog.filetype, MAX_FILE_TYPE_SIZE, "%s", fileType);
    adtLog.fileFormatVersion = version;
    adtLog.date = date;
    adtLog.status = status;
    adtLog.factoryLog = factoryLog;
    adtLog.auditToken = auditToken;

    // Create the JSON string
    char *json = create_json(&adtLog);
    //printf("%s\n", json);
    print_json(json);


    // Free the allocated memory
    free(json);

    return 0;
}


